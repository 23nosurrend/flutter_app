plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.flutter_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.flutter_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def branchName = getBranchName()
            def outputFileName = "${variant.name}-${branchName}-${variant.versionName}.apk"
            outputFileName = outputFileName.replace('/', '_') // Replace '/' with '_'
            outputFileName = outputFileName.replace(' ', '_') // Replace ' ' with '_'
            output.outputFileName = outputFileName
        }
    }
}
    def getBranchName() {
    def branchName = 'main' // Default branch name
    def process = 'git rev-parse --abbrev-ref HEAD'.execute() // Get branch name from Git
    branchName = process.text.trim()
    return branchName

    
}

flutter {
    source = "../.."
}
